/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CategoryAddImport } from './routes/category/add'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const ProductIndexLazyImport = createFileRoute('/product/')()
const CategoryIndexLazyImport = createFileRoute('/category/')()
const ProductAddLazyImport = createFileRoute('/product/add')()
const ProductProductSlugIndexLazyImport = createFileRoute(
  '/product/$productSlug/',
)()
const CategoryCategorySlugIndexLazyImport = createFileRoute(
  '/category/$categorySlug/',
)()
const ProductProductSlugEditLazyImport = createFileRoute(
  '/product/$productSlug/edit',
)()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProductIndexLazyRoute = ProductIndexLazyImport.update({
  id: '/product/',
  path: '/product/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/product/index.lazy').then((d) => d.Route))

const CategoryIndexLazyRoute = CategoryIndexLazyImport.update({
  id: '/category/',
  path: '/category/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/category/index.lazy').then((d) => d.Route),
)

const ProductAddLazyRoute = ProductAddLazyImport.update({
  id: '/product/add',
  path: '/product/add',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/product/add.lazy').then((d) => d.Route))

const CategoryAddRoute = CategoryAddImport.update({
  id: '/category/add',
  path: '/category/add',
  getParentRoute: () => rootRoute,
} as any)

const ProductProductSlugIndexLazyRoute =
  ProductProductSlugIndexLazyImport.update({
    id: '/product/$productSlug/',
    path: '/product/$productSlug/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/product/$productSlug/index.lazy').then((d) => d.Route),
  )

const CategoryCategorySlugIndexLazyRoute =
  CategoryCategorySlugIndexLazyImport.update({
    id: '/category/$categorySlug/',
    path: '/category/$categorySlug/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/category/$categorySlug/index.lazy').then((d) => d.Route),
  )

const ProductProductSlugEditLazyRoute = ProductProductSlugEditLazyImport.update(
  {
    id: '/product/$productSlug/edit',
    path: '/product/$productSlug/edit',
    getParentRoute: () => rootRoute,
  } as any,
).lazy(() =>
  import('./routes/product/$productSlug/edit.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/category/add': {
      id: '/category/add'
      path: '/category/add'
      fullPath: '/category/add'
      preLoaderRoute: typeof CategoryAddImport
      parentRoute: typeof rootRoute
    }
    '/product/add': {
      id: '/product/add'
      path: '/product/add'
      fullPath: '/product/add'
      preLoaderRoute: typeof ProductAddLazyImport
      parentRoute: typeof rootRoute
    }
    '/category/': {
      id: '/category/'
      path: '/category'
      fullPath: '/category'
      preLoaderRoute: typeof CategoryIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/product/': {
      id: '/product/'
      path: '/product'
      fullPath: '/product'
      preLoaderRoute: typeof ProductIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/product/$productSlug/edit': {
      id: '/product/$productSlug/edit'
      path: '/product/$productSlug/edit'
      fullPath: '/product/$productSlug/edit'
      preLoaderRoute: typeof ProductProductSlugEditLazyImport
      parentRoute: typeof rootRoute
    }
    '/category/$categorySlug/': {
      id: '/category/$categorySlug/'
      path: '/category/$categorySlug'
      fullPath: '/category/$categorySlug'
      preLoaderRoute: typeof CategoryCategorySlugIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/product/$productSlug/': {
      id: '/product/$productSlug/'
      path: '/product/$productSlug'
      fullPath: '/product/$productSlug'
      preLoaderRoute: typeof ProductProductSlugIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/category/add': typeof CategoryAddRoute
  '/product/add': typeof ProductAddLazyRoute
  '/category': typeof CategoryIndexLazyRoute
  '/product': typeof ProductIndexLazyRoute
  '/product/$productSlug/edit': typeof ProductProductSlugEditLazyRoute
  '/category/$categorySlug': typeof CategoryCategorySlugIndexLazyRoute
  '/product/$productSlug': typeof ProductProductSlugIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/category/add': typeof CategoryAddRoute
  '/product/add': typeof ProductAddLazyRoute
  '/category': typeof CategoryIndexLazyRoute
  '/product': typeof ProductIndexLazyRoute
  '/product/$productSlug/edit': typeof ProductProductSlugEditLazyRoute
  '/category/$categorySlug': typeof CategoryCategorySlugIndexLazyRoute
  '/product/$productSlug': typeof ProductProductSlugIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/category/add': typeof CategoryAddRoute
  '/product/add': typeof ProductAddLazyRoute
  '/category/': typeof CategoryIndexLazyRoute
  '/product/': typeof ProductIndexLazyRoute
  '/product/$productSlug/edit': typeof ProductProductSlugEditLazyRoute
  '/category/$categorySlug/': typeof CategoryCategorySlugIndexLazyRoute
  '/product/$productSlug/': typeof ProductProductSlugIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/category/add'
    | '/product/add'
    | '/category'
    | '/product'
    | '/product/$productSlug/edit'
    | '/category/$categorySlug'
    | '/product/$productSlug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/category/add'
    | '/product/add'
    | '/category'
    | '/product'
    | '/product/$productSlug/edit'
    | '/category/$categorySlug'
    | '/product/$productSlug'
  id:
    | '__root__'
    | '/'
    | '/category/add'
    | '/product/add'
    | '/category/'
    | '/product/'
    | '/product/$productSlug/edit'
    | '/category/$categorySlug/'
    | '/product/$productSlug/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  CategoryAddRoute: typeof CategoryAddRoute
  ProductAddLazyRoute: typeof ProductAddLazyRoute
  CategoryIndexLazyRoute: typeof CategoryIndexLazyRoute
  ProductIndexLazyRoute: typeof ProductIndexLazyRoute
  ProductProductSlugEditLazyRoute: typeof ProductProductSlugEditLazyRoute
  CategoryCategorySlugIndexLazyRoute: typeof CategoryCategorySlugIndexLazyRoute
  ProductProductSlugIndexLazyRoute: typeof ProductProductSlugIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  CategoryAddRoute: CategoryAddRoute,
  ProductAddLazyRoute: ProductAddLazyRoute,
  CategoryIndexLazyRoute: CategoryIndexLazyRoute,
  ProductIndexLazyRoute: ProductIndexLazyRoute,
  ProductProductSlugEditLazyRoute: ProductProductSlugEditLazyRoute,
  CategoryCategorySlugIndexLazyRoute: CategoryCategorySlugIndexLazyRoute,
  ProductProductSlugIndexLazyRoute: ProductProductSlugIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/category/add",
        "/product/add",
        "/category/",
        "/product/",
        "/product/$productSlug/edit",
        "/category/$categorySlug/",
        "/product/$productSlug/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/category/add": {
      "filePath": "category/add.tsx"
    },
    "/product/add": {
      "filePath": "product/add.lazy.tsx"
    },
    "/category/": {
      "filePath": "category/index.lazy.tsx"
    },
    "/product/": {
      "filePath": "product/index.lazy.tsx"
    },
    "/product/$productSlug/edit": {
      "filePath": "product/$productSlug/edit.lazy.tsx"
    },
    "/category/$categorySlug/": {
      "filePath": "category/$categorySlug/index.lazy.tsx"
    },
    "/product/$productSlug/": {
      "filePath": "product/$productSlug/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
